vim折叠：
1.vimdiff :
  展开被折叠的部分：zo (folding open)
  重新折叠：zc (folding close)

  dp(diff "put"):把一个差异点中当前的文件复制到另一边的文件
  do(diff "get"):把一个差异点中另一边的文件复制到当前的文件中
  
2.vim提供的折叠方式：
          manual           手工定义折叠
          indent             更多的缩进表示更高级别的折叠
          expr                用表达式来定义折叠
          syntax             用语法高亮来定义折叠
          diff                  对没有更改的文本进行折叠
          marker            对文中的标志折叠  
		 
  indent和marker用的比较多
  
  如果使用了indent方式，vim会自动的对大括号的中间部分进行折叠，我们可以直接使用这些现成的折叠成果。
  indent 对应的折叠代码有：
  zc      折叠
  zC     对所在范围内所有嵌套的折叠点进行折叠
  zo      展开折叠
  zO     对所在范围内所有嵌套的折叠点展开
  [z       到当前打开的折叠的开始处。
  ]z       到当前打开的折叠的末尾处。
  zj       向下移动。到达下一个折叠的开始处。关闭的折叠也被计入。
  zk      向上移动到前一折叠的结束处。关闭的折叠也被计入。
  
  
当使用marker方式时，需要用标计来标识代码的折叠，系统默认是{{{和}}}，最好不要改动之：）
可以使用下面的命令来创建和删除折叠：
zf      创建折叠，比如在marker方式下：
                   zf56G，创建从当前行起到56行的代码折叠；
                   10zf或10zf+或zf10↓，创建从当前行起到后10行的代码折叠。
                   10zf-或zf10↑，创建从当前行起到之前10行的代码折叠。
                   在括号处zf%，创建从当前行起到对应的匹配的括号上去（（），{}，[]，等）。
zd      删除 (delete) 在光标下的折叠。仅当 'foldmethod' 设为 "manual" 或 "marker" 时有效。
zD     循环删除 (Delete) 光标下的折叠，即嵌套删除折叠。
          仅当 'foldmethod' 设为 "manual" 或 "marker" 时有效。
zE     除去 (Eliminate) 窗口里“所有”的折叠。
          仅当 'foldmethod' 设为 "manual" 或 "marker" 时有效。
		  
zi是全部展开		  


3. g ctrl + ] :可以跨目录跳转，而且有多个定义时会提示你选择哪个定义

4.vim中快速选中查找
   光标停留在要查找的单词任一个字母上，然后：Shift 加上 *
   
5.vim替换的细节
  s:是替换命令
  如果不加任何行信息，是替换当前行
  第5到第8行:5,8s
  所有行：%s
  g放在末尾是表示匹配到的行的所有字符，如果不加g则是匹配到的行的第一个字符串
  例子：
  ：5,20s/hello/world/g
  

6.批量注释和取消注释
  ctrl+v 进入列编辑模式,向下或向上移动光标,把需要注释的行的开头标记起来,然后按大写的I,再插入注释符,比如”#”,再按Esc,就会全部注释。
  取消注释：也是ctrl+v，然后横向选择你要删除的宽度，再纵向选择，然后按d删除
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  